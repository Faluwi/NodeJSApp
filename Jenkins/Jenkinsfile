appName = "hello-world"

pipeline {
    // Use the 'node' Jenkins agent image which is provided with OpenShift 
    agent {label 'nodejs'}
    stages {
        stage("Checkout") {
            steps {
                checkout scm
            }
        }
        stage("Testing") {
            steps {
                sh "echo 'Testing'"
            }
        }
        stage("Clean BuildConfig") {
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject() {
                            if (openshift.selector("bc", 'hello-world').exists()) {
                                openshift.selector("bc", 'hello-world').delete()                       
                            }
                        }
                    }
                }
            }
        }
        stage("Build and push image to Docker") {
            steps {
                //sh 'oc create -f ./Templates/buildconfig.yaml'
                //sh "oc start-build hello-world --from-dir '.'"
                sh 'oc podman-env'
                sh 'podman build -t docker.io/faluwi/hello-world:v0.3 .'
                sh 'podman push docker.io/faluwi/hello-world:v0.3'
            }
        }
        stage ("Deploy to DEV") {
            steps {
                sh 'oc delete deployment test'
                sh 'oc delete service test'
                sh "oc new-app faluwi/test:latest"
            }
        }
        
        stage ("helm") {
            agent {
                kubernetes {
                    yaml '''
                        apiVersion: v1
                        kind: Pod
                        spec:
                            containers:
                            -  name: helm-slave
                               image: docker.io/faluwi/jenkins-helm-agent:v0.1
                               command:
                               - cat
                               tty: true
                        '''
                }
            }
              steps {
                  container('helm-slave') {
                     sh 'helm version' 
                  }
             }
        }
    }//Stages
}//Pipeline
